using BC = MGroup.DrugDeliveryModel.Tests.Commons.BoundaryAndInitialConditionsUtility.BoundaryConditionCase;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using MGroup.MSolve.Discretization.Entities;
using MGroup.MSolve.Discretization.Dofs;
using MGroup.MSolve.Numerics.Interpolation.Jacobians;
using MGroup.DrugDeliveryModel.Tests.EquationModels;
using MGroup.NumericalAnalyzers.Dynamic;
using MGroup.NumericalAnalyzers.Logging;
using MGroup.NumericalAnalyzers.Staggered;
using MGroup.NumericalAnalyzers.Discretization.NonLinear;
using MGroup.Constitutive.Structural;
using MGroup.DrugDeliveryModel.Tests.Commons;
using MGroup.NumericalAnalyzers;
using MGroup.Solvers.Direct;
using Xunit;
using MGroup.Constitutive.ConvectionDiffusion;
using MGroup.Constitutive.ConvectionDiffusion.BoundaryConditions;
using MGroup.Constitutive.ConvectionDiffusion.InitialConditions;
using System.Diagnostics;
using MGroup.FEM.ConvectionDiffusion.Tests.Commons;

namespace MGroup.DrugDeliveryModel.Tests.Integration
{
    public class EquationCOxVanilla
    {
        //---------------------------------------Equation Cox---------------------------------------

        //---------------------------------------Variables------------------------------------------

        private Dictionary<int, double[]> DomainFluidVelocity = new Dictionary<int, double[]>(); // 2.32E-4 [m/s]
        
        //private Dictionary<int, double> DomainIndependentSource = new Dictionary<int, double>();
        
        //private Dictionary<int, double> DomainDependentSource = new Dictionary<int, double>(); 
        
        double FluidInit = -2.32;
        //double FluidInit = -1.0;
        /// <summary>
        /// Diffusivity of oxygen [m2/s]
        /// </summary>
        private const double Dox = 1.79E-4; // [m2/s]

        /// <summary>
        /// Oxygen uptake [mol/(m3*s)]
        /// </summary>
        private const double Aox = 2.5463E-2; // [mol/(m3*s)]

        /// <summary>
        /// Oxygen uptake [mol/m3]
        /// </summary>
        private const double Kox = 4.64E-3; // [mol / m3]

        /// <summary>
        /// Oxygen permeability across tumor vessel walls [m/s]
        /// </summary>
        private const double PerOx = 3.55E-4; // [m/s]

        /// <summary>
        /// Vascular Density [1/m]
        /// </summary>
        private const double Sv = 7E3; // [1/m]

        /// <summary>
        /// Initial Oxygen Concentration [mol/m3]
        /// </summary>
        private const double CInitialOx = 0; // [mol/m3]

        /// <summary>
        /// Rhs [mol/m3]
        /// </summary>
        private const double CiOx = 0.2; // [mol/m3]

        /// <summary>
        /// Cancer cell density [1]
        /// </summary>
        private Dictionary<int, double> T = new Dictionary<int, double>();// 500 [cells]

        //---------------------------------------Logging----------------------------------
        /// <summary>
        /// The degree of freedom that will be monitored for equation cox
        /// </summary>
        private ConvectionDiffusionDof coxMonitorDOF = ConvectionDiffusionDof.UnknownVariable;

        /// <summary>
        /// The coordinates of the monitored node
        /// </summary>
        private double[] monitorNodeCoords = { 0.09, 0.0, 0.08 };


        //---------------------------------------Time Discretization Specs------------------------------
        private const double TotalTime = 20E-5;

        /// <summary>
        /// For increased accuracy use time-step of order 1E-5
        /// </summary>
        private const double TimeStep = 1E-5;// sec

        /// <summary>
        /// Simplified version of the independent production term without non-linear term
        /// </summary>
        public Func<double> IndependentLinearSource = () => PerOx * Sv * CiOx;
        
        public Func<double> DependentLinearSource => () => -PerOx * Sv;
        
        static double[] expectedLinSolution = new double[]
            {0.00027617099601129385,
             0.00082795347593641352,
             0.0013786176765330069,
             0.0019281650868235782,
             0.0024765971944125868,
             0.00302391548549161,
             0.003570121444844468,
             0.0041152165558522892,
             0.0046592023004985586,
             0.0052020801593741341,
             0.0057438516116821775,
             0.0062845181352431112,
             0.0068240812064995068,
             0.007362542300520903,
             0.0078999028910086543,
             0.0084361644503007076,
             0.0089713284493762886,
             0.0095053963578606761,
             0.010038369644029817,
             0.01057024977481494}; 
        
        /*static double[] expectedNonLinSolution = new double[]
            {-0.0002577634612139296, -0.0003824929072089781, -0.0005041287202650932, -0.0006223680518233604, -0.0007371803097879908, -0.0008485826525510643, -0.0009566085241174244, -0.0010612972094087, -0.0011626904327479, -0.0012608313031664, -0.0013557640300061, -0.0014475338808293, -0.0015361872058396, -0.0016217714711329, -0.0017043352825885, -0.0017839283953091, -0.0018606017078018, -0.0019344072414479, -0.0020053981062035, -0.0020736284535778, -0.0021391534179488, -0.0022020290472786, -0.0022623122242912, -0.0023200605791849, -0.0023753323949599, -0.0024281865064569, -0.0024786821942082, -0.0025268790742091, -0.0025728369847168, -0.0026166158711677, -0.0026582756702897, -0.0026978761944507, -0.0027354770172447, -0.0027711373612651, -0.0028049159889523, -0.0028368710973323, -0.0028670602173842, -0.00289554011869, -0.0029223667199284, -0.0029475950056838, -0.0029712789499459, -0.00299347144658, -0.0030142242469578, -0.003033587904849, -0.0030516117285885, -0.0030683437404591, -0.003083830643154, -0.0030981177931242, -0.0031112491805564, -0.0031232674156824, -0.0031342137210804, -0.0031441279295981, -0.0031530484875047, -0.0031610124624635, -0.0031680555559069, -0.0031742121193948, -0.0031795151745385, -0.0031839964360835, -0.0031876863377504, -0.0031906140604573, -0.0031928075625557, -0.003194293611741, -0.0031950978183135, -0.0031952446694936, -0.003194757564515, -0.0031936588502453, -0.0031919698571059, -0.0031897109350848, -0.0031869014896599, -0.0031835600174704, -0.0031797041415931, -0.003175350646301, -0.0031705155111971, -0.0031652139446341, -0.0031594604163457, -0.0031532686892265, -0.0031466518502135, -0.0031396223402308, -0.0031321919831694, -0.0031243720138842, -0.0031161731051972, -0.003107605393903, -0.003098678505779, -0.0030894015796072, -0.0030797832902208, -0.0030698318705901, -0.0030595551329673, -0.0030489604891118, -0.0030380549696194, -0.0030268452423817, -0.0030153376302006, -0.0030035381275875, -0.002991452416775, -0.0029790858829683, -0.0029664436288675, -0.0029535304884879, -0.0029403510403071, -0.0029269096197679, -0.002913210331164, -0.0028992570589357, -0.0028850534784027, -0.002870603065959, -0.0028559091087555, -0.0028409747138946, -0.0028258028171594, -0.0028103961913014, -0.0027947574539066, -0.0027788890748633, -0.0027627933834487, -0.0027464725750559, -0.0027299287175787, -0.0027131637574707, -0.0026961795254977, -0.0026789777421974, -0.0026615600230618, -0.0026439278834581, -0.0026260827433006, -0.0026080259314864, -0.0025897586901094, -0.0025712821784614, -0.0025525974768341, -0.0025337055901316, -0.0025146074513029, -0.0024953039246049, -0.0024757958087049, -0.0024560838396305, -0.0024361686935755, -0.0024160509895693, -0.0023957312920178, -0.0023752101131211, -0.0023544879151764, -0.002333565112771, -0.0023124420748714, -0.0022911191268145, -0.0022695965522061, -0.0022478745947306, -0.0022259534598779, -0.0022038333165916, -0.0021815142988416, -0.0021589965071265, -0.0021362800099088, -0.002113364844986, -0.0020902510208023, -0.0020669385177023, -0.002043427289131, -0.0020197172627826, -0.0019958083416999, -0.0019717004053284, -0.001947393310526, -0.0019228868925312, -0.001898180965892, -0.0018732753253575, -0.0018481697467334, -0.0018228639877041, -0.001797357788623, -0.0017716508732718, -0.0017457429495908, -0.0017196337103823, -0.0016933228339875, -0.0016668099849381, -0.0016400948145846, -0.0016131769617024, -0.0015860560530756, -0.0015587317040611, -0.0015312035191329, -0.0015034710924077, -0.0014755340081533, -0.0014473918412795, -0.0014190441578136, -0.0013904905153598, -0.0013617304635448, -0.0013327635444484, -0.0013035892930215, -0.0012742072374912, -0.0012446168997529, -0.001214817795752, -0.0011848094358532, -0.0011545913251996, -0.0011241629640615, -0.0010935238481754, -0.0010626734690729, -0.0010316113144016, -0.0010003368682362, -0.0009688496113819304, -0.000937149021669496, -0.000905234574242558, -0.0008731057418374974, -0.0008407619950560975, -0.0008082028026312603, -0.0007754276316860232, -0.0007424359479861096, -0.0007092272161862357, -0.00067580090007038, -0.0006421564627862144, -0.0006082933670738804, -0.0005742110754892989, -0.0005399090506221664, -0.0005053867553088135, -0.0004706436528400536, -0.0004356792071642032, -0.0004004928830853672, -0.0003650841464571477, -0.0003294524643718876, -0.0002935973053455663, -0.0002575181394984602, -0.00022121443873166952, -0.00018468567689961448, -0.00014793132997859267, -0.00011095087623148989, -7.374379636872796e-05, -3.630957370553269e-05, 1.3523056844016489e-06, 3.9242352818776807e-05, 7.736107566001408e-05, 0.00011570897897196795, 0.00015428656417997558, 0.0001930943292341567, 0.00023213276847593785, 0.00027140237250772124, 0.0003109036280656537, 0.0003506370178954437, 0.0003906030206311767, 0.00043080211067708207, 0.0004712347580922065, 0.0005119014284779498, 0.0005528025828684216, 0.0005939386776235787, 0.0006353101643251027, 0.000676917489674983, 0.000718761095396766, 0.0007608414181394361, 0.0008031588893838936, 0.0008457139353520048, 0.0008885069769181676, 0.000931538429523394, 0.0009748087030918552, 0.0010183182019498, 0.0010620673247472, 0.0011060564643812, 0.0011502860079225, 0.0011947563365434, 0.0012394678254493, 0.0012844208438111, 0.0013296157547005, 0.001375052915028, 0.001420732675482, 0.001466655380471, 0.0015128213680675, 0.0015592309699541, 0.0016058845113716, 0.0016527823110698, 0.0016999246812591, 0.0017473119275652, 0.0017949443489857, 0.0018428222378478, 0.0018909458797692, 0.0019393155536198, 0.0019879315314862, 0.0020367940786372, 0.002085903453492, 0.0021352599075899, 0.0021848636855613, 0.0022347150251014, 0.0022848141569451, 0.0023351613048435, 0.0023857566855427, 0.0024366005087635, 0.0024876929771838, 0.0025390342864216, 0.00259062462502, 0.0026424641744343, 0.0026945531090198, 0.002746891596022, 0.0027994797955673, 0.0028523178606565, 0.0029054059371587, 0.002958744163807, 0.0030123326721958, 0.0030661715867795, 0.0031202610248721, 0.0031746010966491, 0.0032291919051493, 0.0032840335462798, 0.0033391261088205, 0.0033944696744309, 0.003450064317658, 0.003505910105945, 0.0035620070996419, 0.0036183553520166, 0.0036749549092673, 0.0037318058105367, 0.0037889080879261, 0.0038462617665119, 0.0039038668643618, 0.0039617233925536, 0.0040198313551934, 0.0040781907494359, 0.0041368015655056, 0.004195663786718, 0.0042547773895031, 0.0043141423434289, 0.0043737586112257, 0.0044336261488122, 0.004493744905321, 0.0045541148231267, 0.0046147358378728, 0.0046756078785014, 0.0047367308672819, 0.0047981047198417, 0.0048597293451968, 0.0049216046457838, 0.0049837305174916, 0.0050461068496951, 0.0051087335252884, 0.0051716104207187, 0.0052347374060219, 0.0052981143448573, 0.0053617410945439, 0.0054256175060966, 0.0054897434242638, 0.005554118687564, 0.0056187431283249, 0.005683616572721, 0.0057487388408129, 0.0058141097465867, 0.0058797290979937, 0.0059455966969904, 0.0060117123395795, 0.0060780758158505, 0.006144686910021, 0.0062115454004784, 0.0062786510598219, 0.0063460036549046, 0.0064136029468761, 0.0064814486912252, 0.0065495406378233, 0.0066178785309672, 0.0066864621094228, 0.0067552911064693, 0.0068243652499425, 0.0068936842622792, 0.0069632478605615, 0.0070330557565615, 0.0071031076567854, 0.0071734032625188, 0.0072439422698711, 0.0073147243698209, 0.0073857492482607, 0.0074570165860425, 0.0075285260590226, 0.0076002773381072, 0.0076722700892975, 0.0077445039737357, 0.0078169786477495, 0.0078896937628984, 0.0079626489660187, 0.0080358438992692, 0.0081092782001765, 0.0081829515016804, 0.0082568634321796, 0.0083310136155767, 0.008405401671324, 0.0084800272144682, 0.0085548898556961, 0.0086299892013796, 0.0087053248536204, 0.0087808964102958, 0.0088567034651028, 0.0089327456076032, 0.0090090224232684, 0.0090855334935237, 0.009162278395793, 0.0092392567035429, 0.009316467986327, 0.0093939118098299, 0.0094715877359112, 0.0095494953226491, 0.009627634124384, 0.0097060036917619, 0.009784603571778, 0.0098634333078191, 0.0099424924397072, 0.0100217805037417, 0.0101012970327422, 0.010181041556091, 0.0102610135997747, 0.0103412126864265, 0.0104216383353682, 0.0105022900626511, 0.0105831673810977, 0.0106642698003431, 0.010745596826875, 0.0108271479640753, 0.01090892271226, 0.0109909205687197, 0.0110731410277593, 0.0111555835807379, 0.0112382477161084, 0.0113211329194566, 0.0114042386735406, 0.0114875644583289, 0.0115711097510399, 0.0116548740261792, 0.0117388567555787, 0.0118230574084334, 0.0119074754513398, 0.0119921103483328, 0.0120769615609228, 0.0121620285481324, 0.0122473107665334, 0.0123328076702826, 0.0124185187111581, 0.0125044433385951, 0.0125905809997213, 0.0126769311393922, 0.0127634932002261, 0.012850266622639, 0.0129372508448789, 0.0130244453030602, 0.0131118494311974, 0.0131994626612393, 0.0132872844231018, 0.0133753141447016, 0.0134635512519888, 0.01355199516898, 0.0136406453177902, 0.0137295011186653, 0.0138185619900136, 0.0139078273484381, 0.0139972966087671, 0.0140869691840859, 0.0141768444857673, 0.0142669219235023, 0.0143572009053307, 0.0144476808376708, 0.0145383611253492, 0.0146292411716308, 0.0147203203782478, 0.014811598145429, 0.0149030738719282, 0.0149947469550532, 0.015086616790694, 0.0151786827733508, 0.0152709442961618, 0.0153634007509309, 0.0154560515281549, 0.0155488960170507, 0.0156419336055821, 0.0157351636804863, 0.0158285856273006, 0.0159221988303881, 0.0160160026729636, 0.0161099965371198, 0.0162041798038521, 0.0162985518530838, 0.0163931120636917, 0.0164878598135299, 0.016582794479455, 0.0166779154373499, 0.0167732220621482, 0.0168687137278576, 0.0169643898075837, 0.0170602496735535, 0.0171562926971379, 0.0172525182488755, 0.0173489256984946, 0.0174455144149359, 0.0175422837663746, 0.0176392331202427, 0.0177363618432507, 0.0178336693014091, 0.0179311548600499, 0.0180288178838476, 0.0181266577368407, 0.0182246737824516, 0.0183228653835081, 0.0184212319022629, 0.0185197727004146, 0.0186184871391268, 0.0187173745790486, 0.0188164343803335, 0.0189156659026595, 0.
0190150685052473, 0.0191146415468803, 0.0192143843859226, 0.0193142963803379, 0.0194143768877078, 0.0195146252652503, 0.0196150408698372, 0.0197156230580125, 0.0198163711860099, 0.0199172846097699, 0.0200183626849577, 0.0201196047669797, 0.0202210102110009, 0.0203225783719613, 0.0204243086045925, 0.0205262002634344, 0.020628252702851, 0.0207304652770467, 0.0208328373400819, 0.0209353682458893, 0.0210380573482886, 0.0211409040010024, 0.0212439075576715, 0.0213470673718694, 0.0214503827971175, 0.0215538531869, 0.0216574778946781, 0.0217612562739044, 0.0218651876780373, 0.021969271460555, 0.0220735069749694, 0.0221778935748399, 0.0222824306137868, 0.022387117445505, 0.0224919534237773, 0.0225969379024874, 0.0227020702356328, 0.0228073497773379, 0.0229127758818667, 0.0230183479036351, 0.0231240651972235, 0.0232299271173892, 0.0233359330190782, 0.0234420822574374, 0.0235483741878264, 0.0236548081658294, 0.0237613835472663, 0.0238680996882046, 0.0239749559449705, 0.0240819516741601, 0.0241890862326504, 0.0242963589776103, 0.0244037692665112, 0.0245113164571378, 0.0246189999075985, 0.0247268189763359, 0.024834773022137, 0.0249428614041433, 0.0250510834818609, 0.0251594386151702, 0.0252679261643359, 0.0253765454900164, 0.0254852959532737, 0.0255941769155822, 0.0257031877388387, 0.0258123277853709, 0.0259215964179469, 0.026030992999784, 0.0261405168945574, 0.0262501674664091, 0.0263599440799564, 0.0264698461003004, 0.0265798728930344, 0.0266900238242519, 0.0268002982605553, 0.0269106955690634, 0.0270212151174197, 0.0271318562738002, 0.0272426184069207, 0.0273535008860451, 0.0274645030809924, 0.0275756243621444, 0.0276868641004529, 0.0277982216674469, 0.0279096964352399, 0.0280212877765367, 0.0281329950646404, 0.0282448176734593, 0.0283567549775134, 0.0284688063519416, 0.0285809711725074, 0.0286932488156061, 0.0288056386582707, 0.0289181400781784, 0.0290307524536567, 0.0291434751636895, 0.0292563075879229, 0.0293692491066714, 0.0294822991009236, 0.0295954569523478, 0.0297087220432981, 0.0298220937568191, 0.0299355714766522, 0.0300491545872407, 0.0301628424737351, 0.030276634521998, 0.0303905301186099, 0.0305045286508738, 0.0306186295068201, 0.030732832075212, 0.0308471357455498, 0.0309615399080759, 0.0310760439537793, 0.0311906472744006, 0.0313053492624358, 0.0314201493111414, 0.0315350468145385, 0.0316500411674171, 0.0317651317653401, 0.0318803180046479, 0.031995599282462, 0.0321109749966895, 0.0322264445460263, 0.0323420073299617, 0.0324576627487819, 0.0325734102035734, 0.0326892490962273, 0.032805178829442, 0.0329211988067278, 0.0330373084324093, 0.0331535071116295, 0.0332697942503527, 0.033386169255368, 0.0335026315342923, 0.0336191804955735, 0.0337358155484936, 0.0338525361031716, 0.0339693415705665, 0.03408623136248, 0.0342032048915597, 0.0343202615713013, 0.0344374008160517, 0.0345546220410116, 0.0346719246622376, 0.0347893080966456, 0.0349067717620122, 0.0350243150769779, 0.0351419374610489, 0.0352596383345999, 0.0353774171188758, 0.0354952732359942, 0.0356132061089473, 0.0357312151616041, 0.0358492998187123, 0.0359674595059005, 0.0360856936496796, 0.0362040016774451, 0.0363223830174786, 0.0364408370989497, 0.0365593633519176, 0.0366779612073327, 0.0367966300970384, 0.0369153694537722, 0.0370341787111675, 0.0371530573037552, 0.0372720046669644, 0.0373910202371246, 0.0375101034514661, 0.0376292537481222, 0.0377484705661294, 0.0378677533454291, 0.0379871015268689, 0.0381065145522029, 0.0382259918640933, 0.0383455329061114, 0.0384651371227379, 0.0385848039593644, 0.0387045328622938, 0.0388243232787416, 0.0389441746568357, 0.0390640864456182, 0.0391840580950451, 0.0393040890559875, 0.0394241787802318, 0.0395443267204806, 0.0396645323303527, 0.0397847950643839, 0.0399051143780271, 0.040025489727653, 0.04014592057055, 0.040266406364925, 0.040386946569903, 0.0405075406455277, 0.0406281880527615, 0.0407488882534859, 0.040869640710501, 0.0409904448875261, 0.0411113002491994, 0.041232206261078, 0.0413531623896378, 0.0414741681022737, 0.0415952228672988, 0.041716326153945, 0.041837477432362, 0.0419586761736177, 0.0420799218496974, 0.042201213933504, 0.042322551898857, 0.0424439352204928, 0.0425653633740636, 0.0426868358361373, 0.0428083520841971, 0.0429299115966408, 0.0430515138527801, 0.0431731583328403, 0.0432948445179594, 0.0434165718901878, 0.0435383399324873, 0.0436601481287302, 0.0437819959636992, 0.043903882923086, 0.0440258084934907, 0.0441477721624212, 0.0442697734182919, 0.0443918117504229, 0.0445138866490395, 0.0446359976052705, 0.044758144111148, 0.0448803256596058, 0.0450025417444784, 0.0451247918605004, 0.045247075503305, 0.0453693921694227, 0.0454917413562807, 0.0456141225622013, 0.0457365352864009, 0.0458589790289886, 0.0459814532909649, 0.0461039575742209, 0.0462264913815363, 0.0463490542165785, 0.0464716455839013, 0.0465942649889432, 0.0467169119380262, 0.0468395859383544, 0.0469622864980124, 0.047085013125964, 0.0472077653320505, 0.0473305426269895, 0.0474533445223729, 0.0475761705306657, 0.0476990201652044, 0.0478218929401953, 0.0479447883707127, 0.0480677059726976, 0.0481906452629558, 0.0483136057591562, 0.0484365869798295, 0.0485595884443657, 0.0486826096730131, 0.0488056501868762, 0.0489287095079138, 0.0490517871589376, 0.0491748826636098, 0.0492979955464419, 0.0494211253327925, 0.0495442715488654, 0.0496674337217077, 0.0497906113792082, 0.0499138040500951, 0.0500370112639343, 0.0501602325511273, 0.0502834674429094, 0.0504067154713476, 0.0505299761693385, 0.0506532490706065, 0.0507765337097019, 0.0508998296219983, 0.0510231363436911, 0.0511464534117951, 0.0512697803641427, 0.0513931167393815, 0.0515164620769725, 0.0516398159171877, 0.0517631778011082, 0.0518865472706218, 0.0520099238684212, 0.0521333071380015, 0.0522566966236583, 0.0523800918704852, 0.052503492424372, 0.0526268978320021, 0.0527503076408506, 0.0528737213991818, 0.0529971386560472, 0.0531205589612833, 0.0532439818655089, 0.0533674069201234, 0.0534908336773041, 0.0536142616900044, 0.053737690511951, 0.0538611196976418, 0.0539845488023438, 0.0541079773820906, 0.0542314049936801, 0.0543548311946722, 0.0544782555433866, 0.0546016775989002, 0.054725096921045, 0.0548485130704058, 0.0549719256083176, 0.0550953340968636, 0.0552187380988724, 0.0553421371779161, 0.0554655308983078, 0.0555889188250989, 0.0557123005240773, 0.0558356755617646, 0.055959043505414, 0.0560824039230076, 0.0562057563832545, 0.056329100455588, 0.0564524357101634, 0.0565757617178556, 0.0566990780502568, 0.0568223842796738, 0.0569456799791262, 0.0570689647223435, 0.0571922380837627, 0.0573154996385266, 0.0574387489624803, 0.0575619856321701, 0.0576852092248399, 0.0578084193184298, 0.0579316154915731, 0.0580547973235942, 0.0581779643945062, 0.0583011162850083, 0.0584242525764839, 0.0585473728509978, 0.0586704766912939, 0.0587935636807932, 0.0589166334035909, 0.0590396854444545, 0.0591627193888211, 0.0592857348227954, 0.059408731333147, 0.0595317085073084, 0.0596546659333725, 0.0597776032000901, 0.059900519896868, 0.0600234156137661, 0.0601462899414958, 0.0602691424714172, 0.0603919727955367, 0.0605147805065051, 0.0606375651976151, 0.0607603264627992, 0.060883063896627, 0.0610057770943034, 0.0611284656516659, 0.061251129165183, 0.0613737672319511, 0.061496379449693, 0.0616189654167552, 0.0617415247321059, 0.0618640569953328, 0.0619865618066406, 0.0621090387668493, 0.0622314874773916, 0.0623539075403108, 0.0624762985582588, 0.0625986601344936, 0.0627209918728776, 0.0628432933778751, 0.0629655642545504, 0.0630878041085653, 0.0632100125461776, 0.0633321891742383, 0.0634543336001901, 0.0635764454320649, 0.0636985242784821, 0.0638205697486461, 0.0639425814523445, 0.0640645589999463, 0.0641865020023993, 0.0643084100712286, 0.0644302828185344, 0.0645521198569898, 0.0646739207998391, 0.064795685260896, 0.064917412854541, 0.0650391031957202, 0.0651607558999426, 0.0652823705832791, 0.0654039468623596, 0.065525484354372, 0.0656469826770595, 0.0657684414487195, 0.0658898602882012, 0.066011238814904, 0.0661325766487755, 0.0662538734103099, 0.066375128720546, 0.0664963422010656, 0.0666175134739915, 0.0667386421619859, 0.0668597278882487, 0.0669807702765156, 0.0671017689510564, 0.0672227235366734, 0.0673436336586996, 0.0674644989429973, 0.067585319015956, 0.0677060935044908, 0.0678268220360414, 0.0679475042385696, 0.0680681397405582, 0.0681887281710094, 0.0683092691594431, 0.0684297623358954, 0.068550207330917, 0.0686706037755716, 0.0687909513014345, 0.0689112495405914, 0.0690314981256361, 0.0691516966896698, 0.0692718448662995, 0.069391942289636, 0.0695119885942933, 0.0696319834153866, 0.0697519263885311, 0.0698718171498407, 0.0699916553359265, 0.0701114405838956, 0.0702311725313494, 0.0703508508163829, 0.0704704750775828, 0.0705900449540267, 0.0707095600852814, 0.0708290201114019, 0.0709484246729301, 0.0710677734108937, 0.0711870659668047, 0.0713063019826586, 0.0714254811009329, 0.0715446029645859, 0.0716636672170559, 0.07178267350226, 0.0719016214645925, 0.0720205107489245, 0.0721393410006023, 0.0722581118654466, 0.0723768229897515, 0.0724954740202831, 0.0726140646042788, 0.0727325943894463, 0.0728510630239626, 0.0729694701564728, 0.0730878154360893, 0.0732060985123912, 0.0733243190354225, 0.0734424766556922, 0.0735605710241729, 0.0736786017922997, 0.0737965686119699, 0.0739144711355417, 0.0740323090158335, 0.0741500819061234, 0.0742677894601479, 0.0743854313321012, 0.0745030071766349, 0.0746205166488567, 0.07473795940433, 0.0748553350990729, 0.0749726433895579, 0.0750898839327107, 0.0752070563859099, 0.0753241604069861, 0.0754411956542217, 0.0755581617863496, 0.075675058462553, 0.0757918853424648, 0.0759086420861669, 0.0760253283541896, 0.0761419438075112, 0.0762584881075572, 0.0763749609162001, 0.0764913618957585, 0.0766076907089971, 0.0767239470191257, 0.0768401304897989, 0.0769562407851159, 0.0770722775696197, 0.0771882405082969, 0.0773041292665772, 0.0774199435103328, 0.0775356829058785, 0.0776513471199708, 0.0777669358198079, 0.0778824486730292, 0.077997885347715, 0.
078113245512386, 0.0782285288360035, 0.0783437349879684, 0.0784588636381214, 0.0785739144567429, 0.0786888871145519, 0.0788037812827069, 0.0789185966328045, 0.0790333328368803, 0.0791479895674078, 0.0792625664972986, 0.0793770632999023, 0.0794914796490062, 0.0796058152188351, 0.0797200696840511, 0.0798342427197538, 0.0799483340014797};*/
        
        public void EquationsTests13DistributedModelBuilder()
        {
            IsoparametricJacobian3D.DeterminantTolerance = 1e-20;
        }
        
        [Theory]
        [InlineData("../../../DataFiles/workingTetMesh2185_1Domain.mphtxt")]
        public void SolveEquationCOxNonLinearProduction(string fileName)
        {
            var mesh = new ComsolMeshReader(fileName);

            var ind = DependentLinearSource();
            var dep = IndependentLinearSource();
            foreach (var element in mesh.ElementConnectivity)
            {
                DomainFluidVelocity.Add(element.Key, new double[] { FluidInit, FluidInit, FluidInit });
                //DomainDependentSource.Add(element.Key, DependentLinearSource());
                //DomainIndependentSource.Add(element.Key, IndependentLinearSource());
            }

            //var convectionDiffusionDirichletBC = new List<(BoundaryAndInitialConditionsUtility.BoundaryConditionCase, ConvectionDiffusionDof[], double[][], double[])>()
            //{
            //    (BoundaryAndInitialConditionsUtility.BoundaryConditionCase.TopDirichlet, new ConvectionDiffusionDof[] { ConvectionDiffusionDof.UnknownVariable }, new double[1][]{new double[3] {0.1, 0.1, 0.1}}, new double[] {0.2}),
            //    (BoundaryAndInitialConditionsUtility.BoundaryConditionCase.RightDirichlet,new ConvectionDiffusionDof[] { ConvectionDiffusionDof.UnknownVariable }, new double[1][]{new double[3] {0.1, 0.1, 0.1}}, new double[] {0.2}),
            //    (BoundaryAndInitialConditionsUtility.BoundaryConditionCase.BackDirichlet, new ConvectionDiffusionDof[] { ConvectionDiffusionDof.UnknownVariable }, new double[1][]{new double[3] {0.1, 0.1, 0.1}}, new double[] {0.2}),
            //};
            var convectionDiffusionDirichletBC =
            new List<(BC, ConvectionDiffusionDof[], double[][], double[])>()
            {
                (BC.TopRightBackDiriclet, new ConvectionDiffusionDof[] { ConvectionDiffusionDof.UnknownVariable }, new double[2][]{new double[3] {0,0,0},new double[3] {0.1,0.1,0.1}}, new double[]{0.2}),
            };
            var convectionDiffusionNeumannBC = new List<(BoundaryAndInitialConditionsUtility.BoundaryConditionCase, ConvectionDiffusionDof[], double[][], double[])>();

            var nodeIdToMonitor = Utilities.FindNodeIdFromNodalCoordinates(mesh.NodesDictionary, monitorNodeCoords, 1e-4);

            var modelBuilder = new CoxVanillaSourceModelBuilder(mesh, DomainFluidVelocity,
                                                                Dox, Aox, Kox, PerOx, Sv, CInitialOx, T, 0, IndependentLinearSource, DependentLinearSource,
                                                                nodeIdToMonitor, coxMonitorDOF,
                                                                convectionDiffusionDirichletBC, convectionDiffusionNeumannBC);
            var model = modelBuilder.GetModel();
            modelBuilder.AddBoundaryConditions(model);

            (var analyzer, var solver, var nlAnalyzers) = modelBuilder.GetAppropriateSolverAnalyzerAndLog(model, TimeStep, TotalTime, 0, 1  );

            ((NewmarkDynamicAnalyzer)analyzer).ResultStorage = new ImplicitIntegrationAnalyzerLog();

            analyzer.Initialize(true);
            analyzer.Solve();

            int totalNewmarkstepsNum = (int)Math.Truncate(TotalTime / TimeStep);
            var cox = new double[totalNewmarkstepsNum];
            for (int i1 = 0; i1 < totalNewmarkstepsNum; i1++)
            {
                var timeStepResultsLog = ((NewmarkDynamicAnalyzer)analyzer).ResultStorage.Logs[i1];
                cox[i1] = ((DOFSLog)timeStepResultsLog).DOFValues[model.GetNode(nodeIdToMonitor), coxMonitorDOF];
            }
            Assert.True(ResultChecker.CheckResults(cox, expectedLinSolution, 1E-6));

            //CSVExporter.ExportVectorToCSV(cox, "../../../Integration/cox_non_linear_nodes_mslv.csv");
            //Console.WriteLine("FINISHED solving Cox Non-Linear prod");
            //Assert.True(CompareResults(cox));

        }

        

        /*private bool CompareResults(double[] solution)
        {
            bool ret = true;
            double tolerance = 1e-1;

            for (var i=0 ; i < Math.Min(expectedNonLinSolution.Length, solution.Length) ; i++)
            {
                var error = Math.Abs(solution[i] - expectedNonLinSolution[i]);
                Debug.WriteLine("\n======\nStep " + i);
                Debug.WriteLine("\tExpected   :" + expectedNonLinSolution[i]);
                Debug.WriteLine("\tCalculated :" + solution[i]);
                Debug.WriteLine("\tError      :" + error);
                if ( error > tolerance)
                {
                    Debug.WriteLine("Wrong result on step "+i+", Error: "+error);
                    ret = false;
                    break;
                }
            }

            return ret;
        }*/


    }
}
